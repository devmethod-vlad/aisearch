[tool.poetry]
name = "aisearch"
version = "0.1.0"
description = ""
authors = ["emias"]

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.dependencies]
python = "^3.12.1"
fastapi = {extras = ["all"], version = "^0.115.12"}
dishka = "^1.6.0"
structlog = "^25.4.0"
toml = "^0.10.2"
uvicorn-worker = "^0.3.0"
sqlalchemy = "^2.0.41"
pymilvus = "^2.5.10"
sentence-transformers = "^4.1.0"
redis = "^6.2.0"
nltk = "^3.9.1"
pymorphy3 = "^2.0.4"
celery = "^5.5.3"
markdownify = "^1.1.0"
aiohttp = "^3.12.14"
openpyxl = "^3.1.5"
pandas = "^2.3.1"
shortuuid = "^1.0.13"
aiofiles = "^24.1.0"
opensearch = "^0.9.2"
whoosh = "^2.7.4"
opensearch-py = "^3.0.0"
torch = "2.7.1"
torchvision = "0.22.1"
torchaudio = "2.7.1"

[tool.poetry.group.dev.dependencies]
black = "^24.10.0"
debugpy = "^1.8.12"
pytest = "^8.3.4"
ruff = "^0.6.6"
pytest-asyncio = "^0.21.1"
pytest-cov = "^5.0.0"
pytest-xdist = "^3.6.1"
commitizen = "^3.27.0"
pytest-dotenv = "^0.5.2"
factory-boy = "^3.3.0"
faker = "^26.0.0"
pytest-lazy-fixture = "^0.6.3"
pytest-mock = "^3.14.0"
httpx ="0.24.1"
asgi-lifespan = "^2.1.0"
anyio = "^4.8.0"
polyfactory = "^2.19.0"
mypy = "^1.15.0"
types-toml = "^0.10.8.20240310"
testcontainers = "^4.10.0"
pre-commit = "^4.2.0"

[tool.black]
line-length = 100
include = '\.pyi?$'

[tool.flakehell]
max_line_length = 100
format = "colored"
show_source = true
exclude = [ "tests/fixtures/__init__.py"]

[tool.flakehell.plugins]
pyflakes = ["+*"]
pycodestyle = [ "+*", "-W503", "-E203",]
flake8-black = ["+*"]
wemake-python-styleguide = ["-*"]

[tool.isort]
profile = "black"
multi_line_output = 3
known_third_party = [ "sqlalchemy", "httpx", "pytest", "posix_ipc", "sqlalchemy_utils", "starlette", "pydantic", "fastapi",]
force_sort_within_sections = true

#[tool.commitizen]
#name = "cz_conventional_commits"
#version = "4.6.4"
#bump_message = "release $current_version → $new_version"
#update_changelog_on_bump = true
#version_files = [
#    "pyproject.toml:version"
#]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--tb=short --strict --capture=no -p no:logging --verbose -vv --basetemp=tests/tmp"
testpaths = [
    "tests",
]
filterwarnings = [
  "ignore::DeprecationWarning",
  "ignore::UserWarning",
#   "ignore::sqlalchemy.exc.SAWarning",
  "ignore::pytest.PytestAssertRewriteWarning"
]
asyncio_mode = "auto"

[tool.flake8]
max-line-length = 120
count = true

[tool.pycln]
all = true

[tool.mypy]

exclude = [
    "tests/.*",
]
allow_redefinition = false
check_untyped_defs = true
disallow_untyped_decorators = true
disallow_any_explicit = false
disallow_any_generics = false
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
ignore_errors = false
ignore_missing_imports = false
local_partial_types = true
strict_optional = true
strict_equality = true
no_implicit_optional = false
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unreachable = true
warn_no_return = true

disable_error_code = [
    "attr-defined",
    "call-arg",
    "func-returns-value",
    "misc",
    "no-untyped-def",
    "operator",
    "return-value",
    "arg-type",
    "union-attr",
    "var-annotated",
    "has-type",
    "no-redef",
    "return",
    "var-annotated",
    "valid-type",
    "return-value",
    "attr-defined",
    "override",
    "index",
    "list-item",
    "import-untyped",
    "name-defined"
]


enable_error_code = ["assignment"]


plugins = ["pydantic.mypy"]


[[tool.mypy.overrides]]
module = [
    "sqlalchemy_utils.*",
    "choicesenum.*",
    "factory.*",
    "pytest_async_sqlalchemy.*",
    "sqlalchemy.testing",
    "deepdiff.*",
    "tablib.*",
]
ignore_missing_imports = true

[tool.ruff]
cache-dir = "~/.cache/ruff"
line-length = 120
show-fixes = true

[tool.ruff.lint]
select = ["E", "F", "W", "I", "N", "UP", "B", "C4", "DTZ", "T20", "SIM", "PT", "PL", "PLE", "PLR", "PLW", "D", "ANN"]
ignore = [
    "D100",
    "D104",
    "D106",
    "D107",
    "N805",
    "B904",
    "N818",  # Exception name `AttributeNotImplemented` should be named with an Error suffix
    "UP007",  # Use `X | Y` for type annotations
    "PLR0915",
    "PLR2004",
    "PLR0912",  # Too many branches
    "PT001",
    "PT023",
    "B008",
    "PLR0913",
    "D415",   #First line shoud end ...
    "D205",
    "ANN101",  # Игнорируем проверку аннотации для `self`
    "ANN102",  # Игнорируем проверку аннотации для `cls`
    "ANN204",  # Игнорируем проверку возвращаемого типа для `__init__`
    "SIM102",
    "ANN401",
    "PLC0415" # Игнорируем проверку импортов внутри методов (издержки Celery Worker)
]

fixable = ["F", "I", "D", "E", "W", "PT", "UP", "C", "B"]

[tool.ruff.lint.extend-per-file-ignores]
"*/versions/*.py" = ["D103", "W291"]
"*/models/*.py" = ["F821", "D101"]
"*test_*.py" = ["PLR0913"]
"conftest.py" = ["ANN001", "ANN202", "ANN201", "PT004", "E501", "F821"]
"*/storages/*.py" = ["ANN001", "ANN003", "ANN002", "ANN202", "ANN201", "PT004", "E501", "F821"]
"*/fixtures/*.py" = ["ANN001", "ANN003", "ANN202", "ANN201", "PT004", "E501"]
"*fixtures*.py" = [
    "PLR0913",
    "E501", # Line too long
    "SIM117" # nested "with" statements
]

[tool.ruff.lint.isort]
force-wrap-aliases = true
combine-as-imports = true


[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = ["fastapi.Depends", "fastapi.Query", "fastapi.Path", "fastapi.Header", "fastapi.Body"]

[tool.ruff.lint.pylint]
max-returns = 12
max-args = 6
